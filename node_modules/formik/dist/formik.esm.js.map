{"version":3,"file":"formik.esm.js","sources":["../src/utils.ts","../src/FormikContext.tsx","../src/Formik.tsx","../src/connect.tsx","../src/FieldArray.tsx","../src/ErrorMessage.tsx"],"sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport toPath from 'lodash/toPath';\nimport * as React from 'react';\n\n/**\n * Deeply get a value from an object via its path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via its path.\n * @see https://github.com/developit/linkstate\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = {};\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (resVal[currentPath]) {\n      resVal = resVal[currentPath];\n    } else if (currentObj) {\n      resVal = resVal[currentPath] = cloneDeep(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  // Return original object if new value is the same as current\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  const result = { ...obj, ...res };\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if (i === 0 && value === undefined) {\n    delete result[pathArray[i]];\n  }\n\n  return result;\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n\n// Assertions\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): obj is Function =>\n  typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): boolean =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): obj is string =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = (value: any): value is PromiseLike<any> =>\n  isObject(value) && isFunction(value.then);\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?Document} doc Defaults to current document.\n * @return {Element | null}\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\n */\nexport function getActiveElement(doc?: Document): Element | null {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\n/**\n * Make a promise cancellable by @istarkov\n * @see https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\n */\nexport function makeCancelable<T extends Promise<any>>(\n  promise: T\n): [T, () => void] {\n  let hasCanceled: boolean = false;\n\n  const wrappedPromise: any = new Promise((resolve, reject) => {\n    promise.then(\n      val => (hasCanceled ? reject({ isCanceled: true }) : resolve(val)),\n      error => (hasCanceled ? reject({ isCanceled: true }) : reject(error))\n    );\n  });\n\n  return [\n    wrappedPromise,\n    function cancel() {\n      hasCanceled = true;\n    },\n  ];\n}\n","import * as React from 'react';\nimport { FormikContext } from './types';\n\nconst PrivateFormikContext = React.createContext<FormikContext<any>>({} as any);\nexport const FormikProvider = PrivateFormikContext.Provider;\nexport const FormikConsumer = PrivateFormikContext.Consumer;\n\nexport function useFormikContext<Values>() {\n  return React.useContext<FormikContext<Values>>(PrivateFormikContext);\n}\n","import * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport deepmerge from 'deepmerge';\nimport {\n  FormikConfig,\n  FormikErrors,\n  FormikState,\n  FormikTouched,\n  FormikValues,\n  FormikProps,\n} from './types';\nimport {\n  isFunction,\n  isString,\n  setIn,\n  isEmptyChildren,\n  isPromise,\n  setNestedObjectValues,\n  getActiveElement,\n  getIn,\n  makeCancelable,\n} from './utils';\nimport { FormikProvider } from './FormikContext';\nimport warning from 'tiny-warning';\n\n// We already used FormikActions. So we'll go all Elm-y, and use Message.\ntype FormikMessage<Values> =\n  | { type: 'SUBMIT_ATTEMPT' }\n  | { type: 'SUBMIT_FAILURE' }\n  | { type: 'SUBMIT_SUCCESS' }\n  | { type: 'SET_ISVALIDATING'; payload: boolean }\n  | { type: 'SET_ISSUBMITTING'; payload: boolean }\n  | { type: 'SET_VALUES'; payload: Values }\n  | { type: 'SET_FIELD_VALUE'; payload: { field: string; value?: any } }\n  | { type: 'SET_FIELD_TOUCHED'; payload: { field: string; value?: boolean } }\n  | { type: 'SET_FIELD_ERROR'; payload: { field: string; value?: string } }\n  | { type: 'SET_TOUCHED'; payload: FormikTouched<Values> }\n  | { type: 'SET_ERRORS'; payload: FormikErrors<Values> }\n  | { type: 'SET_STATUS'; payload: any }\n  | { type: 'SET_FORMIK_STATE'; payload: FormikState<Values> }\n  | { type: 'RESET_FORM'; payload: FormikState<Values> };\n\n// State reducer\nfunction formikReducer<Values>(\n  state: FormikState<Values>,\n  msg: FormikMessage<Values>\n) {\n  switch (msg.type) {\n    case 'SET_VALUES':\n      return { ...state, values: msg.payload };\n    case 'SET_TOUCHED':\n      return { ...state, touched: msg.payload };\n    case 'SET_ERRORS':\n      return { ...state, errors: msg.payload };\n    case 'SET_STATUS':\n      return { ...state, status: msg.payload };\n    case 'SET_ISSUBMITTING':\n      return { ...state, isSubmitting: msg.payload };\n    case 'SET_ISVALIDATING':\n      return { ...state, isValidating: msg.payload };\n    case 'SET_FIELD_VALUE':\n      return {\n        ...state,\n        values: setIn(state.values, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_TOUCHED':\n      return {\n        ...state,\n        touched: setIn(state.touched, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_ERROR':\n      return {\n        ...state,\n        errors: setIn(state.errors, msg.payload.field, msg.payload.value),\n      };\n    case 'RESET_FORM':\n    case 'SET_FORMIK_STATE':\n      return { ...state, ...msg.payload };\n    case 'SUBMIT_ATTEMPT':\n      return {\n        ...state,\n        touched: setNestedObjectValues<FormikTouched<Values>>(\n          state.values,\n          true\n        ),\n        isSubmitting: true,\n        submitCount: state.submitCount + 1,\n      };\n    case 'SUBMIT_FAILURE':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    case 'SUBMIT_SUCCESS':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    default:\n      return state;\n  }\n}\n\nexport function useFormik<Values = object>({\n  validateOnChange = true,\n  validateOnBlur = true,\n  isInitialValid = false,\n  ...rest\n}: FormikConfig<Values>) {\n  const props = { validateOnChange, validateOnBlur, isInitialValid, ...rest };\n  const initialValues = React.useRef(props.initialValues);\n  const isMounted = React.useRef<boolean>(false);\n  const fields = React.useRef<{\n    [field: string]: {\n      validate: (value: any) => string | Promise<string> | undefined;\n    };\n  }>({});\n  const [state, dispatch] = React.useReducer<\n    React.Reducer<FormikState<Values>, FormikMessage<Values>>\n  >(formikReducer, {\n    values: props.initialValues,\n    errors: {},\n    touched: {},\n    isSubmitting: false,\n    isValidating: false,\n    submitCount: 0,\n  });\n\n  const runValidationAsEffect = React.useCallback(\n    () => {\n      const [validate, cancel] = makeCancelable(validateForm(state.values));\n      validate.then(x => x).catch(x => x); // catch the rejection silently\n      return cancel;\n    },\n    [state.values]\n  );\n\n  React.useEffect(\n    () => {\n      if (!!validateOnChange && !state.isSubmitting && isMounted.current) {\n        return runValidationAsEffect();\n      }\n      return;\n    },\n    [state.values]\n  );\n\n  React.useEffect(\n    () => {\n      if (!!validateOnBlur && !state.isSubmitting && isMounted.current) {\n        return runValidationAsEffect();\n      }\n      return;\n    },\n    [state.touched]\n  );\n\n  React.useEffect(() => {\n    isMounted.current = true;\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  const imperativeMethods = {\n    resetForm,\n    submitForm,\n    validateForm,\n    validateField,\n    setErrors,\n    setFieldError,\n    setFieldTouched,\n    setFieldValue,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    setFormikState,\n  };\n\n  function registerField(name: string, { validate }: any) {\n    if (fields.current !== null) {\n      fields.current[name] = {\n        validate,\n      };\n    }\n  }\n\n  function unregisterField(name: string) {\n    if (fields.current !== null) {\n      delete fields.current[name];\n    }\n  }\n\n  function handleBlur(eventOrString: any): void | ((e: any) => void) {\n    if (isString(eventOrString)) {\n      return event => executeBlur(event, eventOrString);\n    } else {\n      executeBlur(eventOrString);\n    }\n\n    function executeBlur(e: any, path?: string) {\n      if (e.persist) {\n        e.persist();\n      }\n      const { name, id, outerHTML } = e.target;\n      const field = path ? path : name ? name : id;\n\n      if (!field && process.env.NODE_ENV !== 'production') {\n        warnAboutMissingIdentifier({\n          htmlContent: outerHTML,\n          documentationAnchorLink: 'handleblur-e-any--void',\n          handlerName: 'handleBlur',\n        });\n      }\n\n      dispatch({\n        type: 'SET_FIELD_TOUCHED',\n        payload: { field, value: true },\n      });\n    }\n  }\n\n  function handleChange(\n    eventOrPath: string | React.ChangeEvent<any>\n  ): void | ((eventOrTextValue: string | React.ChangeEvent<any>) => void) {\n    if (isString(eventOrPath)) {\n      return event => executeChange(event, eventOrPath);\n    } else {\n      executeChange(eventOrPath);\n    }\n\n    function executeChange(\n      eventOrTextValue: string | React.ChangeEvent<any>,\n      maybePath?: string\n    ) {\n      // By default, assume that the first argument is a string. This allows us to use\n      // handleChange with React Native and React Native Web's onChangeText prop which\n      // provides just the value of the input.\n      let field = maybePath;\n      let val = eventOrTextValue;\n      let parsed;\n      // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\n      // so we handle like we would a normal HTML change event.\n      if (!isString(eventOrTextValue)) {\n        // If we can, persist the event\n        // @see https://reactjs.org/docs/events.html#event-pooling\n        if ((eventOrTextValue as React.ChangeEvent<any>).persist) {\n          (eventOrTextValue as React.ChangeEvent<any>).persist();\n        }\n        const {\n          type,\n          name,\n          id,\n          value,\n          checked,\n          outerHTML,\n        } = (eventOrTextValue as React.ChangeEvent<any>).target;\n        field = maybePath ? maybePath : name ? name : id;\n        if (!field && process.env.NODE_ENV !== 'production') {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n            handlerName: 'handleChange',\n          });\n        }\n        val = /number|range/.test(type)\n          ? ((parsed = parseFloat(value)), isNaN(parsed) ? '' : parsed)\n          : /checkbox/.test(type) ? checked : value;\n      }\n\n      if (field) {\n        // Set form fields by name\n        dispatch({ type: 'SET_FIELD_VALUE', payload: { field, value: val } });\n      }\n    }\n  }\n\n  function handleReset() {\n    if (props.onReset) {\n      const maybePromisedOnReset = (props.onReset as any)(\n        state.values,\n        imperativeMethods\n      );\n\n      if (isPromise(maybePromisedOnReset)) {\n        (maybePromisedOnReset as Promise<any>).then(resetForm);\n      } else {\n        resetForm();\n      }\n    } else {\n      resetForm();\n    }\n  }\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement> | undefined) {\n    if (e && e.preventDefault) {\n      e.preventDefault();\n    }\n\n    // Warn if form submission is triggered by a <button> without a\n    // specified `type` attribute during development. This mitigates\n    // a common gotcha in forms with both reset and submit buttons,\n    // where the dev forgets to add type=\"button\" to the reset button.\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof document !== 'undefined'\n    ) {\n      // Safely get the active element (works with IE)\n      const activeElement = getActiveElement();\n      if (\n        activeElement !== null &&\n        activeElement instanceof HTMLButtonElement\n      ) {\n        warning(\n          activeElement.attributes &&\n            activeElement.attributes.getNamedItem('type'),\n          'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.'\n        );\n      }\n    }\n\n    submitForm();\n  }\n\n  function executeSubmit() {\n    return props.onSubmit(state.values, imperativeMethods);\n  }\n\n  function resetForm(nextValues?: Values) {\n    const values = nextValues\n      ? nextValues\n      : initialValues.current !== null\n        ? initialValues.current\n        : props.initialValues;\n    initialValues.current = values;\n    dispatch({\n      type: 'RESET_FORM',\n      payload: {\n        isSubmitting: false,\n        errors: {},\n        touched: {},\n        status: undefined,\n        values,\n        isValidating: false,\n        submitCount: 0,\n      },\n    });\n  }\n\n  function setTouched(touched: FormikTouched<Values>) {\n    dispatch({ type: 'SET_TOUCHED', payload: touched });\n  }\n\n  function setErrors(errors: FormikErrors<Values>) {\n    dispatch({ type: 'SET_ERRORS', payload: errors });\n  }\n\n  function setValues(values: Values) {\n    dispatch({ type: 'SET_VALUES', payload: values });\n  }\n\n  function setFieldError(field: string, value: string | undefined) {\n    dispatch({\n      type: 'SET_FIELD_ERROR',\n      payload: { field, value },\n    });\n  }\n\n  function setFieldValue(\n    field: string,\n    value: any\n    // shouldValidate: boolean = true\n  ) {\n    dispatch({\n      type: 'SET_FIELD_VALUE',\n      payload: {\n        field,\n        value,\n      },\n    });\n  }\n\n  function setFieldTouched(\n    field: string,\n    touched: boolean = true\n    // shouldValidate: boolean = true\n  ) {\n    dispatch({\n      type: 'SET_FIELD_TOUCHED',\n      payload: {\n        field,\n        value: touched,\n      },\n    });\n  }\n\n  function validateField(name: string) {\n    // This will efficiently validate a single field by avoiding state\n    // changes if the validation function is synchronous. It's different from\n    // what is called when using validateForm.\n\n    if (\n      fields.current !== null &&\n      fields.current[name] &&\n      fields.current[name].validate &&\n      isFunction(fields.current[name].validate)\n    ) {\n      const value = getIn(state.values, name);\n      const maybePromise = fields.current[name].validate(value);\n      if (isPromise(maybePromise)) {\n        // Only flip isValidating if the function is async.\n        dispatch({ type: 'SET_ISVALIDATING', payload: true });\n        return maybePromise\n          .then((x: any) => x, (e: any) => e)\n          .then((error: string) => {\n            dispatch({\n              type: 'SET_FIELD_ERROR',\n              payload: { field: name, value: error },\n            });\n            dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          });\n      } else {\n        dispatch({\n          type: 'SET_FIELD_ERROR',\n          payload: {\n            field: name,\n            value: maybePromise as string | undefined,\n          },\n        });\n        return Promise.resolve(maybePromise as string | undefined);\n      }\n    } else {\n      return Promise.resolve();\n    }\n  }\n\n  function runValidateHandler(\n    values: Values,\n    field?: string\n  ): Promise<FormikErrors<Values>> {\n    return new Promise(resolve => {\n      const maybePromisedErrors = (props.validate as any)(values, field);\n      if (maybePromisedErrors === undefined) {\n        resolve({});\n      } else if (isPromise(maybePromisedErrors)) {\n        (maybePromisedErrors as Promise<any>).then(\n          () => {\n            resolve({});\n          },\n          errors => {\n            resolve(errors);\n          }\n        );\n      } else {\n        resolve(maybePromisedErrors);\n      }\n    });\n  }\n\n  /**\n   * Run validation against a Yup schema and optionally run a function if successful\n   */\n  function runValidationSchema(values: Values, field?: string) {\n    return new Promise(resolve => {\n      const { validationSchema } = props;\n      const schema = isFunction(validationSchema)\n        ? validationSchema(field)\n        : validationSchema;\n      let promise =\n        field && schema.validateAt\n          ? schema.validateAt(field, values)\n          : validateYupSchema(values, schema);\n      promise.then(\n        () => {\n          resolve({});\n        },\n        (err: any) => {\n          resolve(yupToFormErrors(err));\n        }\n      );\n    });\n  }\n\n  function runSingleFieldLevelValidation(\n    field: string,\n    value: void | string\n  ): Promise<string> {\n    return new Promise(resolve =>\n      resolve(fields.current[field].validate(value))\n    ).then(x => x, e => e);\n  }\n\n  function runFieldLevelValidations(\n    values: Values\n  ): Promise<FormikErrors<Values>> {\n    if (fields.current === null) {\n      return Promise.resolve({});\n    }\n    const fieldKeysWithValidation: string[] = Object.keys(\n      fields.current\n    ).filter(\n      f =>\n        fields.current !== null &&\n        fields.current[f] &&\n        fields.current[f].validate &&\n        isFunction(fields.current[f].validate)\n    );\n\n    // Construct an array with all of the field validation functions\n    const fieldValidations: Promise<string>[] =\n      fieldKeysWithValidation.length > 0\n        ? fieldKeysWithValidation.map(f =>\n            runSingleFieldLevelValidation(f, getIn(values, f))\n          )\n        : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\n\n    return Promise.all(fieldValidations).then((fieldErrorsList: string[]) =>\n      fieldErrorsList.reduce(\n        (prev, curr, index) => {\n          if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\n            return prev;\n          }\n          if (!!curr) {\n            prev = setIn(prev, fieldKeysWithValidation[index], curr);\n          }\n          return prev;\n        },\n        {} as FormikErrors<Values>\n      )\n    );\n  }\n\n  /**\n   * Run all validations methods and update state accordingly\n   */\n  function validateForm(\n    values: Values = state.values\n  ): Promise<FormikErrors<Values>> {\n    if (\n      props.validationSchema ||\n      props.validate ||\n      (fields.current &&\n        Object.keys(fields.current).filter(\n          key => !!fields.current[key].validate\n        ).length > 0)\n    ) {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n      return Promise.all([\n        runFieldLevelValidations(values),\n        props.validationSchema ? runValidationSchema(values) : {},\n        props.validate ? runValidateHandler(values) : {},\n      ]).then(([fieldErrors, schemaErrors, validateErrors]) => {\n        const combinedErrors = deepmerge.all<FormikErrors<Values>>(\n          [fieldErrors, schemaErrors, validateErrors],\n          { arrayMerge }\n        );\n        if (!isEqual(state.errors, combinedErrors)) {\n          dispatch({ type: 'SET_ERRORS', payload: combinedErrors });\n        }\n        dispatch({ type: 'SET_ISVALIDATING', payload: false });\n        return combinedErrors;\n      });\n    } else {\n      return Promise.resolve({});\n    }\n  }\n\n  function setFormikState(\n    stateOrCb:\n      | FormikState<Values>\n      | ((state: FormikState<Values>) => FormikState<Values>)\n  ): void {\n    if (isFunction(stateOrCb)) {\n      dispatch({ type: 'SET_FORMIK_STATE', payload: stateOrCb(state) });\n    } else {\n      dispatch({ type: 'SET_FORMIK_STATE', payload: stateOrCb });\n    }\n  }\n\n  function setStatus(status: any) {\n    dispatch({ type: 'SET_STATUS', payload: status });\n  }\n\n  function setSubmitting(isSubmitting: boolean) {\n    dispatch({ type: 'SET_ISSUBMITTING', payload: isSubmitting });\n  }\n\n  function submitForm() {\n    dispatch({ type: 'SUBMIT_ATTEMPT' });\n    return validateForm().then((combinedErrors: FormikErrors<Values>) => {\n      const isActuallyValid = Object.keys(combinedErrors).length === 0;\n      if (isActuallyValid) {\n        Promise.resolve(executeSubmit())\n          .then(() => {\n            if (isMounted.current) {\n              dispatch({ type: 'SUBMIT_SUCCESS' });\n            }\n          })\n          .catch(_errors => {\n            if (isMounted.current) {\n              dispatch({ type: 'SUBMIT_FAILURE' });\n            }\n          });\n      } else if (isMounted.current) {\n        // ^^^ Make sure Formik is still mounted before calling setState\n        dispatch({ type: 'SUBMIT_FAILURE' });\n      }\n    });\n  }\n\n  function getFieldProps(\n    name: string,\n    type: string\n  ): [\n    {\n      value: any;\n      name: string;\n      onChange: ((e: React.ChangeEvent<any>) => void);\n      onBlur: ((e: any) => void);\n    },\n    {\n      value: any;\n      error?: string | undefined;\n      touch: boolean;\n      initialValue?: any;\n    }\n  ] {\n    const field = {\n      name,\n      value:\n        type && (type === 'radio' || type === 'checkbox')\n          ? undefined // React uses checked={} for these inputs\n          : getIn(state.values, name),\n      onChange: handleChange,\n      onBlur: handleBlur,\n    };\n\n    return [field, getFieldMeta(name)];\n  }\n\n  function getFieldMeta(name: string) {\n    return {\n      value: getIn(state.values, name),\n      error: getIn(state.errors, name),\n      touch: getIn(state.touched, name),\n      initialValue: getIn(initialValues.current, name),\n    } as {\n      value: any;\n      error?: string;\n      touch: boolean;\n      initialValue?: any;\n    };\n  }\n\n  const dirty = React.useMemo(\n    () => !isEqual(initialValues.current, state.values),\n    [initialValues.current, state.values]\n  );\n\n  const isValid = React.useMemo(\n    () =>\n      dirty\n        ? state.errors && Object.keys(state.errors).length === 0\n        : isInitialValid !== false && isFunction(isInitialValid)\n          ? (isInitialValid as (props: FormikConfig<Values>) => boolean)(props)\n          : (isInitialValid as boolean),\n    [state.errors, dirty, isInitialValid]\n  );\n\n  const ctx = {\n    ...state,\n    initialValues: initialValues.current || props.initialValues,\n    handleBlur,\n    handleChange,\n    handleReset,\n    handleSubmit,\n    resetForm,\n    setErrors,\n    setFormikState,\n    setFieldTouched,\n    setFieldValue,\n    setFieldError,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    submitForm,\n    validateForm,\n    validateField,\n    isValid,\n    dirty,\n    unregisterField,\n    registerField,\n    getFieldProps,\n    validateOnBlur,\n    validateOnChange,\n  };\n\n  return ctx;\n}\n\nexport function Formik<Values = object, ExtraProps = {}>(\n  props: FormikConfig<Values> & ExtraProps\n) {\n  const formikbag = useFormik<Values>(props);\n  const { component, children, render } = props;\n  return (\n    <FormikProvider value={formikbag}>\n      {component\n        ? React.createElement(component as any, formikbag)\n        : render\n          ? render(formikbag)\n          : children // children come last, always called\n            ? isFunction(children)\n              ? (children as ((bag: FormikProps<Values>) => React.ReactNode))(\n                  formikbag as FormikProps<Values>\n                )\n              : !isEmptyChildren(children)\n                ? React.Children.only(children)\n                : null\n            : null}\n    </FormikProvider>\n  );\n}\n\nfunction warnAboutMissingIdentifier({\n  htmlContent,\n  documentationAnchorLink,\n  handlerName,\n}: {\n  htmlContent: string;\n  documentationAnchorLink: string;\n  handlerName: string;\n}) {\n  console.warn(\n    `Warning: Formik called \\`${handlerName}\\`, but you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\n    ${htmlContent}\n    Formik cannot determine which value to update. For more info see https://github.com/jaredpalmer/formik#${documentationAnchorLink}\n  `\n  );\n}\n\n/**\n * Transform Yup ValidationError to a more usable object\n */\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\n  let errors: any = {} as FormikErrors<Values>;\n  if (yupError.inner.length === 0) {\n    return setIn(errors, yupError.path, yupError.message);\n  }\n  for (let err of yupError.inner) {\n    if (!errors[err.path]) {\n      errors = setIn(errors, err.path, err.message);\n    }\n  }\n  return errors;\n}\n\n/**\n * Validate a yup schema.\n */\nexport function validateYupSchema<T extends FormikValues>(\n  values: T,\n  schema: any,\n  sync: boolean = false,\n  context: any = {}\n): Promise<Partial<T>> {\n  let validateData: Partial<T> = {};\n  for (let k in values) {\n    if (values.hasOwnProperty(k)) {\n      const key = String(k);\n      validateData[key] = values[key] !== '' ? values[key] : undefined;\n    }\n  }\n  return schema[sync ? 'validateSync' : 'validate'](validateData, {\n    abortEarly: false,\n    context: context,\n  });\n}\n\n/**\n * deepmerge array merging algorithm\n * https://github.com/KyleAMathews/deepmerge#combine-array\n */\nfunction arrayMerge(target: any[], source: any[], options: any): any[] {\n  const destination = target.slice();\n\n  source.forEach(function(e: any, i: number) {\n    if (typeof destination[i] === 'undefined') {\n      const cloneRequested = options.clone !== false;\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone\n        ? deepmerge(Array.isArray(e) ? [] : {}, e, options)\n        : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = deepmerge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n}\n","import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport { FormikContext } from './types';\nimport { FormikConsumer } from './FormikContext';\n\n/**\n * Connect any component to Formik context, and inject as a prop called `formik`;\n * @param Comp React Component\n */\nexport function connect<OuterProps, Values = {}>(\n  Comp: React.ComponentType<OuterProps & { formik: FormikContext<Values> }>\n) {\n  const C: React.SFC<OuterProps> = (props: OuterProps) => (\n    <FormikConsumer>\n      {formik => <Comp {...props} formik={formik} />}\n    </FormikConsumer>\n  );\n  const componentDisplayName =\n    Comp.displayName ||\n    Comp.name ||\n    (Comp.constructor && Comp.constructor.name) ||\n    'Component';\n\n  // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n  (C as React.SFC<OuterProps> & {\n    WrappedComponent: React.ReactNode;\n  }).WrappedComponent = Comp;\n\n  C.displayName = `FormikConnect(${componentDisplayName})`;\n\n  return hoistNonReactStatics<\n    React.ComponentType<OuterProps>,\n    React.ComponentType<OuterProps & { formik: FormikContext<Values> }>\n  >(\n    C,\n    Comp as React.ComponentClass<OuterProps & { formik: FormikContext<Values> }> // cast type to ComponentClass (even if SFC)\n  );\n}\n","import * as React from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { connect } from './connect';\nimport {\n  FormikContext,\n  FormikState,\n  SharedRenderProps,\n  FormikProps,\n} from './types';\nimport { getIn, isEmptyChildren, isFunction, setIn } from './utils';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<FieldArrayRenderProps>;\nexport interface ArrayHelpers {\n  /** Imperatively add a value to the end of an array */\n  push: (obj: any) => void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush: (obj: any) => () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert: (index: number, value: any) => void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert: (index: number, value: any) => () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace: (index: number, value: any) => void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace: (index: number, value: any) => () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift: (value: any) => number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift: (value: any) => () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<T>(index: number): T | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<T>(): T | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = (array: any[], from: number, to: number) => {\n  const copy = [...(array || [])];\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = (array: any[], indexA: number, indexB: number) => {\n  const copy = [...(array || [])];\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy[index] = value;\n  return copy;\n};\nclass FieldArrayInner<Values = {}> extends React.Component<\n  FieldArrayConfig & { formik: FormikContext<Values> },\n  {}\n> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n\n  constructor(props: FieldArrayConfig & { formik: FormikContext<Values> }) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    // @todo Fix TS 3.2.1\n    this.remove = this.remove.bind(this) as any;\n    this.pop = this.pop.bind(this) as any;\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean | Function,\n    alterErrors: boolean | Function\n  ) => {\n    const {\n      name,\n      validateOnChange,\n      formik: { setFormikState, validateForm },\n    } = this.props;\n    setFormikState(\n      (prevState: FormikState<any>) => {\n        let updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;\n        let updateTouched =\n          typeof alterTouched === 'function' ? alterTouched : fn;\n\n        return {\n          ...prevState,\n          values: setIn(\n            prevState.values,\n            name,\n            fn(getIn(prevState.values, name))\n          ),\n          errors: alterErrors\n            ? setIn(\n                prevState.errors,\n                name,\n                updateErrors(getIn(prevState.errors, name))\n              )\n            : prevState.errors,\n          touched: alterTouched\n            ? setIn(\n                prevState.touched,\n                name,\n                updateTouched(getIn(prevState.touched, name))\n              )\n            : prevState.touched,\n        };\n      },\n      () => {\n        if (validateOnChange) {\n          validateForm();\n        }\n      }\n    );\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (array: any[]) => [...(array || []), cloneDeep(value)],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      true,\n      true\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField((array: any[]) => move(array, from, to), true, true);\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      (array: any[]) => insert(array, index, null),\n      (array: any[]) => insert(array, index, null)\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let length = -1;\n    this.updateArrayField(\n      (array: any[]) => {\n        const arr = array ? [value, ...array] : [value];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      }\n    );\n    return length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? [...array] : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        return copy;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array;\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const {\n      component,\n      render,\n      children,\n      name,\n      formik: {\n        validate: _validate,\n        validationSchema: _validationSchema,\n        ...restOfFormik\n      },\n    } = this.props;\n\n    const props: FieldArrayRenderProps = {\n      ...arrayHelpers,\n      form: restOfFormik,\n      name,\n    };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n        ? (render as any)(props)\n        : children // children come last, always called\n          ? typeof children === 'function'\n            ? (children as any)(props)\n            : !isEmptyChildren(children) ? React.Children.only(children) : null\n          : null;\n  }\n}\n\nexport const FieldArray = connect<FieldArrayConfig, any>(FieldArrayInner);\n","import * as React from 'react';\nimport { FormikContext } from './types';\nimport { getIn, isFunction } from './utils';\nimport { connect } from './connect';\n\nexport interface ErrorMessageProps {\n  name: string;\n  className?: string;\n  component?: string | React.ComponentType;\n  children?: ((errorMessage: string) => React.ReactNode);\n  render?: ((errorMessage: string) => React.ReactNode);\n}\n\nclass ErrorMessageImpl extends React.Component<\n  ErrorMessageProps & { formik: FormikContext<any> }\n> {\n  shouldComponentUpdate(\n    props: ErrorMessageProps & { formik: FormikContext<any> }\n  ) {\n    if (\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    let { component, formik, render, children, name, ...rest } = this.props;\n\n    const touch = getIn(formik.touched, name);\n    const error = getIn(formik.errors, name);\n\n    return !!touch && !!error\n      ? render\n        ? isFunction(render) ? render(error) : null\n        : children\n          ? isFunction(children) ? children(error) : null\n          : component\n            ? React.createElement(component, rest as any, error)\n            : error\n      : null;\n  }\n}\n\nexport const ErrorMessage = connect<\n  ErrorMessageProps,\n  ErrorMessageProps & { formik: FormikContext<any> }\n>(ErrorMessageImpl);\n"],"names":["tslib_1.__assign","React.useRef"],"mappings":"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"}