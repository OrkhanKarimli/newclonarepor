"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const di_1 = require("@decorators/di");
const meta_1 = require("./meta");
const middleware_1 = require("./middleware");
/**
 * Attach controllers to express application
 *
 * @param {Express} app Express application
 * @param {Type[]} controllers Controllers array
 */
function attachControllers(app, controllers) {
    controllers.forEach((controller) => registerController(app, controller));
    // error middleware must be registered as the very last one
    app.use(middleware_1.errorMiddlewareHandler());
}
exports.attachControllers = attachControllers;
/**
 * Register controller via registering new Router
 *
 * @param {Application} app
 * @param {ExpressClass} Controller
 * @returns
 */
function registerController(app, Controller) {
    const controller = getController(Controller);
    const meta = meta_1.getMeta(controller);
    const router = express_1.Router();
    const routes = meta.routes;
    const url = meta.url;
    const params = meta.params;
    /**
     * Wrap all registered middleware with helper function
     * that can instantiate or get from the container instance of the class
     * or execute given middleware function
     * @see getMiddleware
     */
    const routerMiddleware = (meta.middleware || [])
        .map(middleware => middleware_1.middlewareHandler(middleware));
    /**
     * Apply router middleware
     */
    if (routerMiddleware.length) {
        router.use(...routerMiddleware);
    }
    /**
     * Applying registered routes
     */
    for (const methodName of Object.keys(routes)) {
        const route = routes[methodName];
        const routeHandler = (req, res, next) => {
            const args = extractParameters(req, res, next, params[methodName]);
            const handler = controller[methodName].apply(controller, args);
            if (handler instanceof Promise) {
                handler.catch(next);
            }
            return handler;
        };
        const routeMiddleware = (route.middleware || [])
            .map(middleware => middleware_1.middlewareHandler(middleware));
        router[route.method].apply(router, [
            route.url, ...routeMiddleware, routeHandler
        ]);
    }
    app.use(url, router);
    return app;
}
/**
 * Extract parameters for handlers
 *
 * @param {Request} req
 * @param {Response} res
 * @param {NextFunction} next
 * @param {ParameterConfiguration[]} params
 *
 * @returns {any[]}
 */
function extractParameters(req, res, next, params) {
    if (!params || !params.length) {
        return [req, res, next];
    }
    const args = [];
    for (const { name, index, type } of params) {
        switch (type) {
            case meta_1.ParameterType.RESPONSE:
                args[index] = res;
                break;
            case meta_1.ParameterType.REQUEST:
                args[index] = getParam(req, null, name);
                break;
            case meta_1.ParameterType.NEXT:
                args[index] = next;
                break;
            case meta_1.ParameterType.PARAMS:
                args[index] = getParam(req, 'params', name);
                break;
            case meta_1.ParameterType.QUERY:
                args[index] = getParam(req, 'query', name);
                break;
            case meta_1.ParameterType.BODY:
                args[index] = getParam(req, 'body', name);
                break;
            case meta_1.ParameterType.HEADERS:
                args[index] = getParam(req, 'headers', name);
                break;
            case meta_1.ParameterType.COOKIES:
                args[index] = getParam(req, 'cookies', name);
                break;
        }
    }
    return args;
}
/**
 * Get controller instance from container or instantiate one
 *
 * @param {any} Controller
 *
 * @returns {ExpressClass}
 */
function getController(Controller) {
    try {
        return di_1.Container.get(Controller);
    }
    catch (_a) {
        return new Controller();
    }
}
/**
 * Get parameter value from the source object
 *
 * @param {*} source
 * @param {string} paramType
 * @param {string} name
 *
 * @returns {*}
 */
function getParam(source, paramType, name) {
    const param = source[paramType] || source;
    return name ? param[name] : param;
}
//# sourceMappingURL=data:application/json;base64,