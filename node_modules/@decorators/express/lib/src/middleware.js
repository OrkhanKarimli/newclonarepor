"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const di_1 = require("@decorators/di");
/**
 * Create request middleware handler that uses class or function provided as middleware
 *
 * @param {Type} middleware
 *
 * @returns {RequestHandler}
 */
function middlewareHandler(middleware) {
    return function (req, res, next) {
        try {
            return getMiddleware(middleware, [req, res, next]);
        }
        catch (error) {
            next(error);
        }
    };
}
exports.middlewareHandler = middlewareHandler;
/**
 * Error Middleware class registration DI token
 */
exports.ERROR_MIDDLEWARE = new di_1.InjectionToken('ERROR_MIDDLEWARE');
/**
 * Add error middleware to the app
 *
 * @returns {ErrorRequestHandler}
 */
function errorMiddlewareHandler() {
    return function (error, req, res, next) {
        try {
            return getMiddleware(exports.ERROR_MIDDLEWARE, [error, req, res, next]);
        }
        catch (_a) {
            next(error);
        }
    };
}
exports.errorMiddlewareHandler = errorMiddlewareHandler;
/**
 * Instantiate middleware and invoke it with arguments
 *
 * @param {InjectionToken | Type} middleware
 * @param {any[]} args
 */
function getMiddleware(middleware, args) {
    const next = args[args.length - 1]; // last parameter is always the next function
    let instance;
    try {
        // first, trying to get instance from the container
        instance = di_1.Container.get(middleware);
    }
    catch (_a) {
        try {
            // if container fails, trying to instantiate it
            instance = new middleware();
        }
        catch (_b) {
            // if instantiation fails, try to use it as is
            instance = middleware;
        }
    }
    // first, assuming that middleware is a class, try to use it,
    // otherwise use it as a function
    const result = instance.use ?
        instance.use.apply(instance, args) :
        instance.apply(instance, args);
    // if result of execution is a promise, add additional listener to catch error
    if (result instanceof Promise) {
        result.catch(e => next(e));
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlkZGxld2FyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsdUNBQTJEO0FBMEIzRDs7Ozs7O0dBTUc7QUFDSCwyQkFBa0MsVUFBZ0I7SUFDaEQsT0FBTyxVQUFTLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0I7UUFDN0QsSUFBSTtZQUNGLE9BQU8sYUFBYSxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUNwRDtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2I7SUFDSCxDQUFDLENBQUE7QUFDSCxDQUFDO0FBUkQsOENBUUM7QUFFRDs7R0FFRztBQUNVLFFBQUEsZ0JBQWdCLEdBQUcsSUFBSSxtQkFBYyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFFdkU7Ozs7R0FJRztBQUNIO0lBQ0UsT0FBTyxVQUFTLEtBQVksRUFBRSxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCO1FBQzNFLElBQUk7WUFDRixPQUFPLGFBQWEsQ0FBQyx3QkFBZ0IsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDakU7UUFBQyxXQUFNO1lBQ04sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2I7SUFDSCxDQUFDLENBQUE7QUFDSCxDQUFDO0FBUkQsd0RBUUM7QUFFRDs7Ozs7R0FLRztBQUNILHVCQUF1QixVQUFpQyxFQUFFLElBQVc7SUFDbkUsTUFBTSxJQUFJLEdBQWlCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsNkNBQTZDO0lBQy9GLElBQUksUUFBUSxDQUFDO0lBRWIsSUFBSTtRQUNGLG1EQUFtRDtRQUNuRCxRQUFRLEdBQUcsY0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUN0QztJQUFDLFdBQU07UUFDTixJQUFJO1lBQ0YsK0NBQStDO1lBQy9DLFFBQVEsR0FBRyxJQUFLLFVBQW1CLEVBQUUsQ0FBQztTQUN2QztRQUFDLFdBQU07WUFDTiw4Q0FBOEM7WUFDOUMsUUFBUSxHQUFHLFVBQWlCLENBQUM7U0FDOUI7S0FDRjtJQUVELDZEQUE2RDtJQUM3RCxpQ0FBaUM7SUFDakMsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLFFBQXlDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNyRSxRQUFpQixDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFM0MsOEVBQThFO0lBQzlFLElBQUksTUFBTSxZQUFZLE9BQU8sRUFBRTtRQUM3QixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDNUI7SUFFRCxPQUFPLE1BQU0sQ0FBQTtBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uLCBSZXF1ZXN0SGFuZGxlciwgRXJyb3JSZXF1ZXN0SGFuZGxlciB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgQ29udGFpbmVyLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0BkZWNvcmF0b3JzL2RpJztcblxuZXhwb3J0IGludGVyZmFjZSBUeXBlIGV4dGVuZHMgRnVuY3Rpb24ge1xuICBuZXcgKC4uLmFyZ3M6IGFueVtdKTtcbn1cblxuLyoqXG4gKiBNaWRkbGV3YXJlIGNsYXNzIGludGVyZmFjZVxuICpcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgTWlkZGxld2FyZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1pZGRsZXdhcmUge1xuICB1c2UocmVxdWVzdDogUmVxdWVzdCwgcmVzcG9uc2U6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pOiB2b2lkO1xufVxuXG4vKipcbiAqIEVycm9yIG1pZGRsZXdhcmUgaW50ZXJmYWNlXG4gKlxuICogQGV4cG9ydFxuICogQGludGVyZmFjZSBFcnJvck1pZGRsZXdhcmVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFcnJvck1pZGRsZXdhcmUge1xuICB1c2UoZXJyb3I6IGFueSwgcmVxdWVzdDogUmVxdWVzdCwgcmVzcG9uc2U6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pOiB2b2lkO1xufVxuXG4vKipcbiAqIENyZWF0ZSByZXF1ZXN0IG1pZGRsZXdhcmUgaGFuZGxlciB0aGF0IHVzZXMgY2xhc3Mgb3IgZnVuY3Rpb24gcHJvdmlkZWQgYXMgbWlkZGxld2FyZVxuICpcbiAqIEBwYXJhbSB7VHlwZX0gbWlkZGxld2FyZVxuICpcbiAqIEByZXR1cm5zIHtSZXF1ZXN0SGFuZGxlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1pZGRsZXdhcmVIYW5kbGVyKG1pZGRsZXdhcmU6IFR5cGUpOiBSZXF1ZXN0SGFuZGxlciB7XG4gIHJldHVybiBmdW5jdGlvbihyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbik6IGFueSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBnZXRNaWRkbGV3YXJlKG1pZGRsZXdhcmUsIFtyZXEsIHJlcywgbmV4dF0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBuZXh0KGVycm9yKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBFcnJvciBNaWRkbGV3YXJlIGNsYXNzIHJlZ2lzdHJhdGlvbiBESSB0b2tlblxuICovXG5leHBvcnQgY29uc3QgRVJST1JfTUlERExFV0FSRSA9IG5ldyBJbmplY3Rpb25Ub2tlbignRVJST1JfTUlERExFV0FSRScpO1xuXG4vKipcbiAqIEFkZCBlcnJvciBtaWRkbGV3YXJlIHRvIHRoZSBhcHBcbiAqXG4gKiBAcmV0dXJucyB7RXJyb3JSZXF1ZXN0SGFuZGxlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yTWlkZGxld2FyZUhhbmRsZXIoKTogRXJyb3JSZXF1ZXN0SGFuZGxlciB7XG4gIHJldHVybiBmdW5jdGlvbihlcnJvcjogRXJyb3IsIHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKTogdm9pZCB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBnZXRNaWRkbGV3YXJlKEVSUk9SX01JRERMRVdBUkUsIFtlcnJvciwgcmVxLCByZXMsIG5leHRdKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIG5leHQoZXJyb3IpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEluc3RhbnRpYXRlIG1pZGRsZXdhcmUgYW5kIGludm9rZSBpdCB3aXRoIGFyZ3VtZW50c1xuICpcbiAqIEBwYXJhbSB7SW5qZWN0aW9uVG9rZW4gfCBUeXBlfSBtaWRkbGV3YXJlXG4gKiBAcGFyYW0ge2FueVtdfSBhcmdzXG4gKi9cbmZ1bmN0aW9uIGdldE1pZGRsZXdhcmUobWlkZGxld2FyZTogSW5qZWN0aW9uVG9rZW4gfCBUeXBlLCBhcmdzOiBhbnlbXSkge1xuICBjb25zdCBuZXh0OiBOZXh0RnVuY3Rpb24gPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07IC8vIGxhc3QgcGFyYW1ldGVyIGlzIGFsd2F5cyB0aGUgbmV4dCBmdW5jdGlvblxuICBsZXQgaW5zdGFuY2U7XG5cbiAgdHJ5IHtcbiAgICAvLyBmaXJzdCwgdHJ5aW5nIHRvIGdldCBpbnN0YW5jZSBmcm9tIHRoZSBjb250YWluZXJcbiAgICBpbnN0YW5jZSA9IENvbnRhaW5lci5nZXQobWlkZGxld2FyZSk7XG4gIH0gY2F0Y2gge1xuICAgIHRyeSB7XG4gICAgICAvLyBpZiBjb250YWluZXIgZmFpbHMsIHRyeWluZyB0byBpbnN0YW50aWF0ZSBpdFxuICAgICAgaW5zdGFuY2UgPSBuZXcgKG1pZGRsZXdhcmUgYXMgVHlwZSkoKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIGlmIGluc3RhbnRpYXRpb24gZmFpbHMsIHRyeSB0byB1c2UgaXQgYXMgaXNcbiAgICAgIGluc3RhbmNlID0gbWlkZGxld2FyZSBhcyBhbnk7XG4gICAgfVxuICB9XG5cbiAgLy8gZmlyc3QsIGFzc3VtaW5nIHRoYXQgbWlkZGxld2FyZSBpcyBhIGNsYXNzLCB0cnkgdG8gdXNlIGl0LFxuICAvLyBvdGhlcndpc2UgdXNlIGl0IGFzIGEgZnVuY3Rpb25cbiAgY29uc3QgcmVzdWx0ID0gaW5zdGFuY2UudXNlID9cbiAgICAoaW5zdGFuY2UgYXMgTWlkZGxld2FyZSB8IEVycm9yTWlkZGxld2FyZSkudXNlLmFwcGx5KGluc3RhbmNlLCBhcmdzKSA6XG4gICAgKGluc3RhbmNlIGFzIFR5cGUpLmFwcGx5KGluc3RhbmNlLCBhcmdzKTtcblxuICAvLyBpZiByZXN1bHQgb2YgZXhlY3V0aW9uIGlzIGEgcHJvbWlzZSwgYWRkIGFkZGl0aW9uYWwgbGlzdGVuZXIgdG8gY2F0Y2ggZXJyb3JcbiAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICByZXN1bHQuY2F0Y2goZSA9PiBuZXh0KGUpKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cbiJdfQ==