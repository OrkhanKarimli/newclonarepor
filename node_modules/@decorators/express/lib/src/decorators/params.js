"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const meta_1 = require("../meta");
/**
 * Parameter decorator factory, creates parameter decorator
 *
 * @param {ParameterType} parameterType Parameter Type
 */
function decoratorFactory(type) {
    return function (name) {
        return function (target, methodName, index) {
            const meta = meta_1.getMeta(target);
            if (meta.params[methodName] === undefined) {
                meta.params[methodName] = [];
            }
            meta.params[methodName].push({ index, type, name });
        };
    };
}
/**
 * Express req object
 */
exports.Request = decoratorFactory(meta_1.ParameterType.REQUEST);
/**
 * Express res object
 */
exports.Response = decoratorFactory(meta_1.ParameterType.RESPONSE);
/**
 * Express next function
 */
exports.Next = decoratorFactory(meta_1.ParameterType.NEXT);
/**
 * Express req.params object or single param, if param name was specified
 */
exports.Params = decoratorFactory(meta_1.ParameterType.PARAMS);
/**
 * Express req.query object or single query param, if query param name was specified
 */
exports.Query = decoratorFactory(meta_1.ParameterType.QUERY);
/**
 * Express req.body object or single body param, if body param name was specified
 */
exports.Body = decoratorFactory(meta_1.ParameterType.BODY);
/**
 * Express req.headers object or single headers param, if headers param name was specified
 */
exports.Headers = decoratorFactory(meta_1.ParameterType.HEADERS);
/**
 * Express req.body object or single cookies param, if cookies param name was specified
 */
exports.Cookies = decoratorFactory(meta_1.ParameterType.COOKIES);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW1zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2RlY29yYXRvcnMvcGFyYW1zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0NBQThEO0FBRTlEOzs7O0dBSUc7QUFDSCwwQkFBMEIsSUFBbUI7SUFDM0MsT0FBTyxVQUFTLElBQWE7UUFDM0IsT0FBTyxVQUFTLE1BQVcsRUFBRSxVQUFrQixFQUFFLEtBQWE7WUFDNUQsTUFBTSxJQUFJLEdBQWdCLGNBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUUxQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssU0FBUyxFQUFFO2dCQUN6QyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQzthQUM5QjtZQUVELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRDs7R0FFRztBQUNVLFFBQUEsT0FBTyxHQUFHLGdCQUFnQixDQUFDLG9CQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFL0Q7O0dBRUc7QUFDVSxRQUFBLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxvQkFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRWpFOztHQUVHO0FBQ1UsUUFBQSxJQUFJLEdBQUcsZ0JBQWdCLENBQUMsb0JBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUV6RDs7R0FFRztBQUNVLFFBQUEsTUFBTSxHQUFHLGdCQUFnQixDQUFDLG9CQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFN0Q7O0dBRUc7QUFDVSxRQUFBLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQyxvQkFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRTNEOztHQUVHO0FBQ1UsUUFBQSxJQUFJLEdBQUcsZ0JBQWdCLENBQUMsb0JBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUV6RDs7R0FFRztBQUNVLFFBQUEsT0FBTyxHQUFHLGdCQUFnQixDQUFDLG9CQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFL0Q7O0dBRUc7QUFDVSxRQUFBLE9BQU8sR0FBRyxnQkFBZ0IsQ0FBQyxvQkFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhwcmVzc01ldGEsIFBhcmFtZXRlclR5cGUsIGdldE1ldGEgfSBmcm9tICcuLi9tZXRhJztcblxuLyoqXG4gKiBQYXJhbWV0ZXIgZGVjb3JhdG9yIGZhY3RvcnksIGNyZWF0ZXMgcGFyYW1ldGVyIGRlY29yYXRvclxuICpcbiAqIEBwYXJhbSB7UGFyYW1ldGVyVHlwZX0gcGFyYW1ldGVyVHlwZSBQYXJhbWV0ZXIgVHlwZVxuICovXG5mdW5jdGlvbiBkZWNvcmF0b3JGYWN0b3J5KHR5cGU6IFBhcmFtZXRlclR5cGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG5hbWU/OiBzdHJpbmcpOiBQYXJhbWV0ZXJEZWNvcmF0b3Ige1xuICAgIHJldHVybiBmdW5jdGlvbih0YXJnZXQ6IGFueSwgbWV0aG9kTmFtZTogc3RyaW5nLCBpbmRleDogbnVtYmVyKSB7XG4gICAgICBjb25zdCBtZXRhOiBFeHByZXNzTWV0YSA9IGdldE1ldGEodGFyZ2V0KTtcblxuICAgICAgaWYgKG1ldGEucGFyYW1zW21ldGhvZE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbWV0YS5wYXJhbXNbbWV0aG9kTmFtZV0gPSBbXTtcbiAgICAgIH1cblxuICAgICAgbWV0YS5wYXJhbXNbbWV0aG9kTmFtZV0ucHVzaCh7IGluZGV4LCB0eXBlLCBuYW1lIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qKlxuICogRXhwcmVzcyByZXEgb2JqZWN0XG4gKi9cbmV4cG9ydCBjb25zdCBSZXF1ZXN0ID0gZGVjb3JhdG9yRmFjdG9yeShQYXJhbWV0ZXJUeXBlLlJFUVVFU1QpO1xuXG4vKipcbiAqIEV4cHJlc3MgcmVzIG9iamVjdFxuICovXG5leHBvcnQgY29uc3QgUmVzcG9uc2UgPSBkZWNvcmF0b3JGYWN0b3J5KFBhcmFtZXRlclR5cGUuUkVTUE9OU0UpO1xuXG4vKipcbiAqIEV4cHJlc3MgbmV4dCBmdW5jdGlvblxuICovXG5leHBvcnQgY29uc3QgTmV4dCA9IGRlY29yYXRvckZhY3RvcnkoUGFyYW1ldGVyVHlwZS5ORVhUKTtcblxuLyoqXG4gKiBFeHByZXNzIHJlcS5wYXJhbXMgb2JqZWN0IG9yIHNpbmdsZSBwYXJhbSwgaWYgcGFyYW0gbmFtZSB3YXMgc3BlY2lmaWVkXG4gKi9cbmV4cG9ydCBjb25zdCBQYXJhbXMgPSBkZWNvcmF0b3JGYWN0b3J5KFBhcmFtZXRlclR5cGUuUEFSQU1TKTtcblxuLyoqXG4gKiBFeHByZXNzIHJlcS5xdWVyeSBvYmplY3Qgb3Igc2luZ2xlIHF1ZXJ5IHBhcmFtLCBpZiBxdWVyeSBwYXJhbSBuYW1lIHdhcyBzcGVjaWZpZWRcbiAqL1xuZXhwb3J0IGNvbnN0IFF1ZXJ5ID0gZGVjb3JhdG9yRmFjdG9yeShQYXJhbWV0ZXJUeXBlLlFVRVJZKTtcblxuLyoqXG4gKiBFeHByZXNzIHJlcS5ib2R5IG9iamVjdCBvciBzaW5nbGUgYm9keSBwYXJhbSwgaWYgYm9keSBwYXJhbSBuYW1lIHdhcyBzcGVjaWZpZWRcbiAqL1xuZXhwb3J0IGNvbnN0IEJvZHkgPSBkZWNvcmF0b3JGYWN0b3J5KFBhcmFtZXRlclR5cGUuQk9EWSk7XG5cbi8qKlxuICogRXhwcmVzcyByZXEuaGVhZGVycyBvYmplY3Qgb3Igc2luZ2xlIGhlYWRlcnMgcGFyYW0sIGlmIGhlYWRlcnMgcGFyYW0gbmFtZSB3YXMgc3BlY2lmaWVkXG4gKi9cbmV4cG9ydCBjb25zdCBIZWFkZXJzID0gZGVjb3JhdG9yRmFjdG9yeShQYXJhbWV0ZXJUeXBlLkhFQURFUlMpO1xuXG4vKipcbiAqIEV4cHJlc3MgcmVxLmJvZHkgb2JqZWN0IG9yIHNpbmdsZSBjb29raWVzIHBhcmFtLCBpZiBjb29raWVzIHBhcmFtIG5hbWUgd2FzIHNwZWNpZmllZFxuICovXG5leHBvcnQgY29uc3QgQ29va2llcyA9IGRlY29yYXRvckZhY3RvcnkoUGFyYW1ldGVyVHlwZS5DT09LSUVTKTtcbiJdfQ==