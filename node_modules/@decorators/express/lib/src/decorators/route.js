"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const meta_1 = require("../meta");
/**
 * Route decorator factory, creates decorator
 *
 * @param {string} method
 * @param {string} url
 * @param {Type[]} middleware
 */
function decoratorFactory(method, url, middleware) {
    return (target, key, descriptor) => {
        const meta = meta_1.getMeta(target);
        meta.routes[key] = { method, url, middleware };
        return descriptor;
    };
}
/**
 * All routes
 *
 * Special-cased "all" method, applying the given route `path`,
 * middleware, and callback to _every_ HTTP method.
 *
 * @param {string} url
 * @param {Type[]} [middleware]
 */
function All(url, middleware) {
    return decoratorFactory('all', url, middleware);
}
exports.All = All;
;
/**
 * Get route
 *
 * @param {string} url
 * @param {Type[]} [middleware]
 */
function Get(url, middleware) {
    return decoratorFactory('get', url, middleware);
}
exports.Get = Get;
;
/**
 * Post route
 *
 * @param {string} url
 * @param {Type[]} [middleware]
 */
function Post(url, middleware) {
    return decoratorFactory('post', url, middleware);
}
exports.Post = Post;
/**
 * Put route
 *
 * @param {string} url
 * @param {Type[]} [middleware]
 */
function Put(url, middleware) {
    return decoratorFactory('put', url, middleware);
}
exports.Put = Put;
/**
 * Delete route
 *
 * @param {string} url
 * @param {Type[]} [middleware]
 */
function Delete(url, middleware) {
    return decoratorFactory('delete', url, middleware);
}
exports.Delete = Delete;
/**
 * Patch route
 *
 * @param {string} url
 * @param {Type[]} [middleware]
 */
function Patch(url, middleware) {
    return decoratorFactory('patch', url, middleware);
}
exports.Patch = Patch;
/**
 * Options route
 *
 * @param {string} url
 * @param {Type[]} [middleware]
 */
function Options(url, middleware) {
    return decoratorFactory('options', url, middleware);
}
exports.Options = Options;
/**
 * Head route
 *
 * @param {string} url
 * @param {Type[]} [middleware]
 */
function Head(url, middleware) {
    return decoratorFactory('head', url, middleware);
}
exports.Head = Head;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGVjb3JhdG9ycy9yb3V0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtDQUErQztBQUcvQzs7Ozs7O0dBTUc7QUFDSCwwQkFBMEIsTUFBYyxFQUFFLEdBQVcsRUFBRSxVQUFrQjtJQUN2RSxPQUFPLENBQUMsTUFBVyxFQUFFLEdBQVcsRUFBRSxVQUFlLEVBQUUsRUFBRTtRQUNuRCxNQUFNLElBQUksR0FBZ0IsY0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxDQUFDO1FBRS9DLE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILGFBQW9CLEdBQVcsRUFBRSxVQUFtQjtJQUNsRCxPQUFPLGdCQUFnQixDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUE7QUFDakQsQ0FBQztBQUZELGtCQUVDO0FBQUEsQ0FBQztBQUVGOzs7OztHQUtHO0FBQ0gsYUFBb0IsR0FBVyxFQUFFLFVBQW1CO0lBQ2xELE9BQU8sZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQTtBQUNqRCxDQUFDO0FBRkQsa0JBRUM7QUFBQSxDQUFDO0FBRUY7Ozs7O0dBS0c7QUFDSCxjQUFxQixHQUFXLEVBQUUsVUFBbUI7SUFDbkQsT0FBTyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ25ELENBQUM7QUFGRCxvQkFFQztBQUVEOzs7OztHQUtHO0FBQ0gsYUFBb0IsR0FBVyxFQUFFLFVBQW1CO0lBQ2xELE9BQU8sZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBRkQsa0JBRUM7QUFFRDs7Ozs7R0FLRztBQUNILGdCQUF1QixHQUFXLEVBQUUsVUFBbUI7SUFDckQsT0FBTyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3JELENBQUM7QUFGRCx3QkFFQztBQUVEOzs7OztHQUtHO0FBQ0gsZUFBc0IsR0FBVyxFQUFFLFVBQW1CO0lBQ3BELE9BQU8sZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNwRCxDQUFDO0FBRkQsc0JBRUM7QUFFRDs7Ozs7R0FLRztBQUNILGlCQUF3QixHQUFXLEVBQUUsVUFBbUI7SUFDdEQsT0FBTyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFGRCwwQkFFQztBQUVEOzs7OztHQUtHO0FBQ0gsY0FBcUIsR0FBVyxFQUFFLFVBQW1CO0lBQ25ELE9BQU8sZ0JBQWdCLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBRkQsb0JBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHByZXNzTWV0YSwgZ2V0TWV0YSB9IGZyb20gJy4uL21ldGEnO1xuaW1wb3J0IHsgVHlwZSB9IGZyb20gJy4uL21pZGRsZXdhcmUnO1xuXG4vKipcbiAqIFJvdXRlIGRlY29yYXRvciBmYWN0b3J5LCBjcmVhdGVzIGRlY29yYXRvclxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7VHlwZVtdfSBtaWRkbGV3YXJlXG4gKi9cbmZ1bmN0aW9uIGRlY29yYXRvckZhY3RvcnkobWV0aG9kOiBzdHJpbmcsIHVybDogc3RyaW5nLCBtaWRkbGV3YXJlOiBUeXBlW10pIHtcbiAgcmV0dXJuICh0YXJnZXQ6IGFueSwga2V5OiBzdHJpbmcsIGRlc2NyaXB0b3I6IGFueSkgPT4ge1xuICAgIGNvbnN0IG1ldGE6IEV4cHJlc3NNZXRhID0gZ2V0TWV0YSh0YXJnZXQpO1xuXG4gICAgbWV0YS5yb3V0ZXNba2V5XSA9IHsgbWV0aG9kLCB1cmwsIG1pZGRsZXdhcmUgfTtcblxuICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICB9O1xufVxuXG4vKipcbiAqIEFsbCByb3V0ZXNcbiAqXG4gKiBTcGVjaWFsLWNhc2VkIFwiYWxsXCIgbWV0aG9kLCBhcHBseWluZyB0aGUgZ2l2ZW4gcm91dGUgYHBhdGhgLFxuICogbWlkZGxld2FyZSwgYW5kIGNhbGxiYWNrIHRvIF9ldmVyeV8gSFRUUCBtZXRob2QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHBhcmFtIHtUeXBlW119IFttaWRkbGV3YXJlXVxuICovXG5leHBvcnQgZnVuY3Rpb24gQWxsKHVybDogc3RyaW5nLCBtaWRkbGV3YXJlPzogVHlwZVtdKSB7XG4gIHJldHVybiBkZWNvcmF0b3JGYWN0b3J5KCdhbGwnLCB1cmwsIG1pZGRsZXdhcmUpXG59O1xuXG4vKipcbiAqIEdldCByb3V0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7VHlwZVtdfSBbbWlkZGxld2FyZV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEdldCh1cmw6IHN0cmluZywgbWlkZGxld2FyZT86IFR5cGVbXSkge1xuICByZXR1cm4gZGVjb3JhdG9yRmFjdG9yeSgnZ2V0JywgdXJsLCBtaWRkbGV3YXJlKVxufTtcblxuLyoqXG4gKiBQb3N0IHJvdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHBhcmFtIHtUeXBlW119IFttaWRkbGV3YXJlXVxuICovXG5leHBvcnQgZnVuY3Rpb24gUG9zdCh1cmw6IHN0cmluZywgbWlkZGxld2FyZT86IFR5cGVbXSkge1xuICByZXR1cm4gZGVjb3JhdG9yRmFjdG9yeSgncG9zdCcsIHVybCwgbWlkZGxld2FyZSk7XG59XG5cbi8qKlxuICogUHV0IHJvdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICogQHBhcmFtIHtUeXBlW119IFttaWRkbGV3YXJlXVxuICovXG5leHBvcnQgZnVuY3Rpb24gUHV0KHVybDogc3RyaW5nLCBtaWRkbGV3YXJlPzogVHlwZVtdKSB7XG4gIHJldHVybiBkZWNvcmF0b3JGYWN0b3J5KCdwdXQnLCB1cmwsIG1pZGRsZXdhcmUpO1xufVxuXG4vKipcbiAqIERlbGV0ZSByb3V0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7VHlwZVtdfSBbbWlkZGxld2FyZV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIERlbGV0ZSh1cmw6IHN0cmluZywgbWlkZGxld2FyZT86IFR5cGVbXSkge1xuICByZXR1cm4gZGVjb3JhdG9yRmFjdG9yeSgnZGVsZXRlJywgdXJsLCBtaWRkbGV3YXJlKTtcbn1cblxuLyoqXG4gKiBQYXRjaCByb3V0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7VHlwZVtdfSBbbWlkZGxld2FyZV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFBhdGNoKHVybDogc3RyaW5nLCBtaWRkbGV3YXJlPzogVHlwZVtdKSB7XG4gIHJldHVybiBkZWNvcmF0b3JGYWN0b3J5KCdwYXRjaCcsIHVybCwgbWlkZGxld2FyZSk7XG59XG5cbi8qKlxuICogT3B0aW9ucyByb3V0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7VHlwZVtdfSBbbWlkZGxld2FyZV1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE9wdGlvbnModXJsOiBzdHJpbmcsIG1pZGRsZXdhcmU/OiBUeXBlW10pIHtcbiAgcmV0dXJuIGRlY29yYXRvckZhY3RvcnkoJ29wdGlvbnMnLCB1cmwsIG1pZGRsZXdhcmUpO1xufVxuXG4vKipcbiAqIEhlYWQgcm91dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge1R5cGVbXX0gW21pZGRsZXdhcmVdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBIZWFkKHVybDogc3RyaW5nLCBtaWRkbGV3YXJlPzogVHlwZVtdKSB7XG4gIHJldHVybiBkZWNvcmF0b3JGYWN0b3J5KCdoZWFkJywgdXJsLCBtaWRkbGV3YXJlKTtcbn1cbiJdfQ==