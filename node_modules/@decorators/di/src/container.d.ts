import { Provider, Injectable } from './types';
export declare class Container {
    /**
     * Register new or replace providers
     *
     * @static
     * @param {Provider[]} providers
     */
    static provide(providers: Provider[]): void;
    /**
     * Get instance of injectable
     *
     * @template T
     * @param {Injectable} injectable
     * @returns {T}
     */
    static get<T>(injectable: Injectable): T;
    /**
     * Resolve provider
     *
     * @private
     * @param {StoreProvider} provider
     * @param {StoreProvider[]} [requesters = []] provider, that initiated di
     * @returns {*}
     */
    private static resolveProvider(provider, requesters?);
    /**
     * Register class provider
     *
     * @private
     * @static
     * @param {ClassProvider} provider
     */
    private static registerClassProvider(provider);
    /**
     * Register factory provider
     *
     * @private
     * @static
     * @param {FactoryProvider} provider
     */
    private static registerFactoryProvider(provider);
    /**
     * Register value provider
     *
     * @private
     * @static
     * @param {ValueProvider} provider
     * @memberof Container
     */
    private static registerValueProvider(provider);
}
