"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const reflector_1 = require("./reflector");
const injection_token_1 = require("./injection-token");
class Store {
    /**
     * Get provider id
     *
     * @static
     * @param {Injectable} injectable
     * @returns {InjectableId}
     */
    static providerId(injectable) {
        if (!injectable) {
            return null;
        }
        if (typeof injectable === 'string' || injectable instanceof injection_token_1.InjectionToken) {
            return injectable;
        }
        return reflector_1.Reflector.getId(injectable);
    }
    /**
     * Register provider
     *
     * @internal
     * @static
     * @param {Type} provider
     * @param {InjectableId} useId
     */
    static provider(type, args) {
        let provider = this.findProvider(type);
        if (provider === undefined) {
            provider = this.createProvider(type);
        }
        if (args === undefined) {
            reflector_1.Reflector.paramTypes(type)
                .forEach((param, index) => {
                if (!provider.deps[index] || !provider.deps[index].id) {
                    provider.deps[index] = { id: this.providerId(param) };
                }
            });
            return type;
        }
        const dep = provider.deps[args.index] || { id: null };
        provider.deps[args.index] = {
            id: args.injectable ? this.providerId(args.injectable) : dep.id,
            optional: args.optional || dep.optional
        };
        return type;
    }
    /**
     * Find stored provider
     *
     * @internal
     * @static
     * @param {Injectable} injectable
     *
     * @returns {StoreProvider}
     */
    static findProvider(injectable) {
        const id = this.providerId(injectable);
        return this.providers.find((provider) => provider.id === id);
    }
    /**
     * Replace stored provider wiht new provider
     *
     * @static
     * @param {Injectable} injectable
     * @param {StoreProvider} provider
     */
    static replaceProvider(injectable, provider) {
        const storeProvider = this.findProvider(injectable);
        const index = this.providers.indexOf(storeProvider);
        if (index !== -1) {
            this.providers[index] = provider;
        }
        else {
            this.providers.push(provider);
        }
    }
    /**
     * Create and store provider
     *
     * @internal
     * @static
     * @param {Injectable} injectable
     *
     * @returns {StoreProvider}
     */
    static createProvider(type) {
        const id = reflector_1.Reflector.setId(type);
        const storeProvider = { id, type, deps: [] };
        this.providers.push(storeProvider);
        return storeProvider;
    }
}
Store.providers = [];
exports.Store = Store;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdG9yZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDJDQUF3QztBQUN4Qyx1REFBbUQ7QUFFbkQ7SUFHRTs7Ozs7O09BTUc7SUFDSSxNQUFNLENBQUMsVUFBVSxDQUFDLFVBQXNCO1FBQzdDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUNoQixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLE9BQU8sVUFBVSxLQUFLLFFBQVEsSUFBSSxVQUFVLFlBQVksZ0NBQWMsQ0FBQyxDQUFDLENBQUM7WUFDM0UsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUNwQixDQUFDO1FBRUQsTUFBTSxDQUFDLHFCQUFTLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFVLEVBQUUsSUFBeUM7UUFDMUUsSUFBSSxRQUFRLEdBQWtCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdEQsRUFBRSxDQUFDLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDM0IsUUFBUSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLHFCQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztpQkFDdkIsT0FBTyxDQUFDLENBQUMsS0FBaUIsRUFBRSxLQUFhLEVBQUUsRUFBRTtnQkFDNUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUN0RCxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDeEQsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFDO1lBRUwsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUM7UUFFRCxNQUFNLEdBQUcsR0FBZSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUVsRSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRztZQUMxQixFQUFFLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQy9ELFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxJQUFJLEdBQUcsQ0FBQyxRQUFRO1NBQ3hDLENBQUM7UUFFRixNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0ksTUFBTSxDQUFDLFlBQVksQ0FBQyxVQUFzQjtRQUMvQyxNQUFNLEVBQUUsR0FBaUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVyRCxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUF1QixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxNQUFNLENBQUMsZUFBZSxDQUFDLFVBQXNCLEVBQUUsUUFBdUI7UUFDM0UsTUFBTSxhQUFhLEdBQWtCLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbkUsTUFBTSxLQUFLLEdBQVcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFNUQsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLFFBQVEsQ0FBQztRQUNuQyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoQyxDQUFDO0lBQ0gsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0ssTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFVO1FBQ3RDLE1BQU0sRUFBRSxHQUFpQixxQkFBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQyxNQUFNLGFBQWEsR0FBa0IsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUU1RCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVuQyxNQUFNLENBQUMsYUFBYSxDQUFDO0lBQ3ZCLENBQUM7O0FBMUdhLGVBQVMsR0FBb0IsRUFBRSxDQUFDO0FBRGhELHNCQTZHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0b3JlUHJvdmlkZXIsIFR5cGUsIEluamVjdGFibGUsIEluamVjdGFibGVJZCwgRGVwZW5kZW5jeSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgUmVmbGVjdG9yIH0gZnJvbSAnLi9yZWZsZWN0b3InO1xuaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICcuL2luamVjdGlvbi10b2tlbic7XG5cbmV4cG9ydCBjbGFzcyBTdG9yZSB7XG4gIHB1YmxpYyBzdGF0aWMgcHJvdmlkZXJzOiBTdG9yZVByb3ZpZGVyW10gPSBbXTtcblxuICAvKipcbiAgICogR2V0IHByb3ZpZGVyIGlkXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtJbmplY3RhYmxlfSBpbmplY3RhYmxlXG4gICAqIEByZXR1cm5zIHtJbmplY3RhYmxlSWR9XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHByb3ZpZGVySWQoaW5qZWN0YWJsZTogSW5qZWN0YWJsZSk6IEluamVjdGFibGVJZCB7XG4gICAgaWYgKCFpbmplY3RhYmxlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGluamVjdGFibGUgPT09ICdzdHJpbmcnIHx8IGluamVjdGFibGUgaW5zdGFuY2VvZiBJbmplY3Rpb25Ub2tlbikge1xuICAgICAgcmV0dXJuIGluamVjdGFibGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlZmxlY3Rvci5nZXRJZChpbmplY3RhYmxlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBwcm92aWRlclxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge1R5cGV9IHByb3ZpZGVyXG4gICAqIEBwYXJhbSB7SW5qZWN0YWJsZUlkfSB1c2VJZFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBwcm92aWRlcih0eXBlOiBUeXBlLCBhcmdzPzogeyBpbmplY3RhYmxlPywgb3B0aW9uYWw/LCBpbmRleD8gfSk6IFR5cGUge1xuICAgIGxldCBwcm92aWRlcjogU3RvcmVQcm92aWRlciA9IHRoaXMuZmluZFByb3ZpZGVyKHR5cGUpO1xuXG4gICAgaWYgKHByb3ZpZGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHByb3ZpZGVyID0gdGhpcy5jcmVhdGVQcm92aWRlcih0eXBlKTtcbiAgICB9XG5cbiAgICBpZiAoYXJncyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBSZWZsZWN0b3IucGFyYW1UeXBlcyh0eXBlKVxuICAgICAgICAuZm9yRWFjaCgocGFyYW06IEluamVjdGFibGUsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICBpZiAoIXByb3ZpZGVyLmRlcHNbaW5kZXhdIHx8ICFwcm92aWRlci5kZXBzW2luZGV4XS5pZCkge1xuICAgICAgICAgICAgcHJvdmlkZXIuZGVwc1tpbmRleF0gPSB7IGlkOiB0aGlzLnByb3ZpZGVySWQocGFyYW0pIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuXG4gICAgY29uc3QgZGVwOiBEZXBlbmRlbmN5ID0gcHJvdmlkZXIuZGVwc1thcmdzLmluZGV4XSB8fCB7IGlkOiBudWxsIH07XG5cbiAgICBwcm92aWRlci5kZXBzW2FyZ3MuaW5kZXhdID0ge1xuICAgICAgaWQ6IGFyZ3MuaW5qZWN0YWJsZSA/IHRoaXMucHJvdmlkZXJJZChhcmdzLmluamVjdGFibGUpIDogZGVwLmlkLFxuICAgICAgb3B0aW9uYWw6IGFyZ3Mub3B0aW9uYWwgfHwgZGVwLm9wdGlvbmFsXG4gICAgfTtcblxuICAgIHJldHVybiB0eXBlO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmQgc3RvcmVkIHByb3ZpZGVyXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7SW5qZWN0YWJsZX0gaW5qZWN0YWJsZVxuICAgKlxuICAgKiBAcmV0dXJucyB7U3RvcmVQcm92aWRlcn1cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZmluZFByb3ZpZGVyKGluamVjdGFibGU6IEluamVjdGFibGUpOiBTdG9yZVByb3ZpZGVyIHtcbiAgICBjb25zdCBpZDogSW5qZWN0YWJsZUlkID0gdGhpcy5wcm92aWRlcklkKGluamVjdGFibGUpO1xuXG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXJzLmZpbmQoKHByb3ZpZGVyOiBTdG9yZVByb3ZpZGVyKSA9PiBwcm92aWRlci5pZCA9PT0gaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2Ugc3RvcmVkIHByb3ZpZGVyIHdpaHQgbmV3IHByb3ZpZGVyXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtJbmplY3RhYmxlfSBpbmplY3RhYmxlXG4gICAqIEBwYXJhbSB7U3RvcmVQcm92aWRlcn0gcHJvdmlkZXJcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcmVwbGFjZVByb3ZpZGVyKGluamVjdGFibGU6IEluamVjdGFibGUsIHByb3ZpZGVyOiBTdG9yZVByb3ZpZGVyKTogdm9pZCB7XG4gICAgY29uc3Qgc3RvcmVQcm92aWRlcjogU3RvcmVQcm92aWRlciA9IHRoaXMuZmluZFByb3ZpZGVyKGluamVjdGFibGUpO1xuICAgIGNvbnN0IGluZGV4OiBudW1iZXIgPSB0aGlzLnByb3ZpZGVycy5pbmRleE9mKHN0b3JlUHJvdmlkZXIpO1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5wcm92aWRlcnNbaW5kZXhdID0gcHJvdmlkZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHJvdmlkZXJzLnB1c2gocHJvdmlkZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHN0b3JlIHByb3ZpZGVyXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7SW5qZWN0YWJsZX0gaW5qZWN0YWJsZVxuICAgKlxuICAgKiBAcmV0dXJucyB7U3RvcmVQcm92aWRlcn1cbiAgICovXG4gIHByaXZhdGUgc3RhdGljIGNyZWF0ZVByb3ZpZGVyKHR5cGU6IFR5cGUpOiBTdG9yZVByb3ZpZGVyIHtcbiAgICBjb25zdCBpZDogSW5qZWN0YWJsZUlkID0gUmVmbGVjdG9yLnNldElkKHR5cGUpO1xuICAgIGNvbnN0IHN0b3JlUHJvdmlkZXI6IFN0b3JlUHJvdmlkZXIgPSB7IGlkLCB0eXBlLCBkZXBzOiBbXSB9O1xuXG4gICAgdGhpcy5wcm92aWRlcnMucHVzaChzdG9yZVByb3ZpZGVyKTtcblxuICAgIHJldHVybiBzdG9yZVByb3ZpZGVyO1xuICB9XG5cbn1cbiJdfQ==