"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const store_1 = require("./store");
const errors_1 = require("./errors");
class Container {
    /**
     * Register new or replace providers
     *
     * @static
     * @param {Provider[]} providers
     */
    static provide(providers) {
        providers
            .filter((_provider) => _provider.useClass)
            .forEach((_provider) => this.registerClassProvider(_provider));
        providers
            .filter((_provider) => _provider.useFactory)
            .forEach((_provider) => this.registerFactoryProvider(_provider));
        providers
            .filter((_provider) => _provider.useValue)
            .forEach((_provider) => this.registerValueProvider(_provider));
    }
    /**
     * Get instance of injectable
     *
     * @template T
     * @param {Injectable} injectable
     * @returns {T}
     */
    static get(injectable) {
        const provider = store_1.Store.findProvider(injectable);
        if (provider === undefined) {
            throw new errors_1.MissingProviderError(injectable);
        }
        return this.resolveProvider(provider);
    }
    /**
     * Resolve provider
     *
     * @private
     * @param {StoreProvider} provider
     * @param {StoreProvider[]} [requesters = []] provider, that initiated di
     * @returns {*}
     */
    static resolveProvider(provider, requesters = []) {
        if (provider.value) {
            return provider.value;
        }
        const _requesters = requesters.concat([provider]);
        const deps = provider
            .deps.map((dep) => {
            const requesterProvider = _requesters.find((requester) => requester.id === dep.id);
            if (requesterProvider) {
                throw new errors_1.RecursiveProviderError(_requesters, requesterProvider);
            }
            const depService = store_1.Store.findProvider(dep.id);
            if (!depService && !dep.optional) {
                throw new errors_1.MissingProviderError(provider, dep);
            }
            if (!depService && dep.optional) {
                return null;
            }
            return this.resolveProvider(depService, _requesters);
        });
        provider.value = provider.factory ?
            provider.factory(...deps) : new provider.type(...deps);
        return provider.value;
    }
    /**
     * Register class provider
     *
     * @private
     * @static
     * @param {ClassProvider} provider
     */
    static registerClassProvider(provider) {
        const id = store_1.Store.providerId(provider.provide);
        const classProvider = store_1.Store.findProvider(provider.useClass);
        const deps = classProvider ? classProvider.deps : (provider.deps || [])
            .map((dep) => ({ id: store_1.Store.providerId(dep) }));
        store_1.Store.replaceProvider(provider.provide, { id, deps, type: provider.useClass });
    }
    /**
     * Register factory provider
     *
     * @private
     * @static
     * @param {FactoryProvider} provider
     */
    static registerFactoryProvider(provider) {
        const id = store_1.Store.providerId(provider.provide);
        const factory = provider.useFactory;
        const deps = (provider.deps || [])
            .map((dep) => ({ id: store_1.Store.providerId(dep) }));
        store_1.Store.replaceProvider(provider.provide, { id, factory, deps });
    }
    /**
     * Register value provider
     *
     * @private
     * @static
     * @param {ValueProvider} provider
     * @memberof Container
     */
    static registerValueProvider(provider) {
        const id = store_1.Store.providerId(provider.provide);
        const value = provider.useValue;
        store_1.Store.replaceProvider(provider.provide, { id, value });
    }
}
exports.Container = Container;
//# sourceMappingURL=data:application/json;base64,